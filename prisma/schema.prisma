// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "dataproxy"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String   @id @default(uuid())
  name      String   @default("")
  email     String   @unique
  address   String   @default("0x0000000000000000000000000000000000000000")
  orders    Order[]
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String   @id @default(uuid())
  orderId   String   @unique // External OrderId from eventbrite API
  eventId   String // Event Brite EventId
  userId    String // FK to User model
  user      User     @relation(fields: [userId], references: [id])
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id        String   @id @default(uuid())
  ticketId  String   @unique // External attendee from eventbrite API
  orderId   String // FK to Order model
  order     Order    @relation(fields: [orderId], references: [id])
  userId    String // FK to User model
  user      User    @relation(fields: [userId], references: [id])
  tokens    Token[]
  mintingQueue MintingQueue[]
  nftStatus String   @default("pending") // pending, minted, failed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id        String   @id @default(uuid())
  tokenId   String   @unique // NFT tokenId
  txId      String   @unique // NFT txId
  ticketId  String   // FK to Ticket model
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MintingQueue {
  id        String   @id @default(uuid())
  ticketId  String   // FK to Ticket model
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  transactionHash String
  status   String   @default("pending") // pending, processes, failed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id        String   @id @default(uuid())
  body      Json     @default("{}")
}
